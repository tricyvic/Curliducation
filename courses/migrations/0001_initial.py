# Generated by Django 4.2 on 2025-10-25 06:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Lesson title', max_length=200)),
                ('description', models.TextField(help_text='Lesson description')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of lesson in course (1, 2, 3, etc.)')),
                ('video_url', models.URLField(blank=True, help_text='YouTube, Vimeo, or other video platform URL', null=True)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Lesson duration in minutes')),
                ('notes', models.TextField(blank=True, help_text='Lesson notes, transcript, or additional information', null=True)),
                ('attachments', models.FileField(blank=True, help_text='PDF, documents, or other downloadable resources', null=True, upload_to='courses/class_materials/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Course title', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Detailed course description')),
                ('short_description', models.CharField(help_text='Brief description for course card (max 300 characters)', max_length=300)),
                ('thumbnail', models.ImageField(blank=True, help_text='Course cover image', null=True, upload_to='courses/thumbnails/')),
                ('price', models.DecimalField(decimal_places=2, help_text='Course price in USD', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced')], default='BEGINNER', help_text='Difficulty level', max_length=15)),
                ('duration_hours', models.PositiveIntegerField(help_text='Estimated course duration in hours')),
                ('is_published', models.BooleanField(default=False, help_text='Make course visible to students')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chef', models.ForeignKey(help_text='Chef who created this course', limit_choices_to={'role': 'CHEF'}, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Recipe name', max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(help_text='Brief description of the dish')),
                ('ingredients', models.TextField(help_text='List all ingredients (one per line or separated by commas)')),
                ('instructions', models.TextField(help_text='Step-by-step cooking instructions')),
                ('prep_time_minutes', models.PositiveIntegerField(help_text='Preparation time in minutes')),
                ('cook_time_minutes', models.PositiveIntegerField(help_text='Cooking time in minutes')),
                ('servings', models.PositiveIntegerField(default=4, help_text='Number of servings')),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard')], default='MEDIUM', help_text='Recipe difficulty level', max_length=10)),
                ('image', models.ImageField(blank=True, help_text='Photo of the finished dish', null=True, upload_to='recipes/')),
                ('is_public', models.BooleanField(default=True, help_text='Make recipe publicly visible or course-exclusive')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chef', models.ForeignKey(help_text='Chef who created this recipe', limit_choices_to={'role': 'CHEF'}, on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, help_text='Link to a course (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recipes', to='courses.course')),
            ],
            options={
                'verbose_name': 'Recipe',
                'verbose_name_plural': 'Recipes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_paid', models.BooleanField(default=False, help_text='Whether payment has been completed')),
                ('payment_id', models.CharField(blank=True, help_text='Stripe payment intent ID or transaction reference', max_length=200, null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount paid for this enrollment', max_digits=10)),
                ('payment_date', models.DateTimeField(blank=True, help_text='Date and time of payment', null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Course completion percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completed', models.BooleanField(default=False, help_text='Whether the course has been completed')),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Last time student accessed the course', null=True)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Date when course was completed', null=True)),
                ('course', models.ForeignKey(help_text='Course the student is enrolled in', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(help_text='Student enrolled in the course', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether student has completed this lesson')),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Time spent on this lesson in minutes')),
                ('last_position_seconds', models.PositiveIntegerField(default=0, help_text='Last video position in seconds (for resume)')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When student first accessed this lesson')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When student completed this lesson', null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='Last time student accessed this lesson')),
                ('enrollment', models.ForeignKey(help_text='Related enrollment', on_delete=django.db.models.deletion.CASCADE, related_name='class_progress', to='courses.enrollment')),
                ('lesson', models.ForeignKey(help_text='Class/Lesson being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='courses.class')),
            ],
            options={
                'verbose_name': 'Class Progress',
                'verbose_name_plural': 'Class Progress',
                'ordering': ['lesson__order'],
            },
        ),
        migrations.AddField(
            model_name='class',
            name='course',
            field=models.ForeignKey(help_text='Course this lesson belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='courses.course'),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Book title', max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(help_text='Book description or synopsis')),
                ('author', models.CharField(help_text='Author name(s)', max_length=200)),
                ('cover_image', models.ImageField(blank=True, help_text='Book cover image', null=True, upload_to='books/covers/')),
                ('pdf_file', models.FileField(blank=True, help_text='PDF file of the book', null=True, upload_to='books/pdfs/')),
                ('external_link', models.URLField(blank=True, help_text='External link to book (Amazon, publisher website, etc.)', null=True)),
                ('pages', models.PositiveIntegerField(blank=True, help_text='Number of pages', null=True)),
                ('isbn', models.CharField(blank=True, help_text='ISBN-10 or ISBN-13', max_length=13, null=True)),
                ('publication_year', models.PositiveIntegerField(blank=True, help_text='Year of publication', null=True)),
                ('language', models.CharField(default='English', help_text='Book language', max_length=50)),
                ('is_public', models.BooleanField(default=True, help_text='Make book publicly visible or course-exclusive')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chef', models.ForeignKey(help_text='Chef who uploaded this book', limit_choices_to={'role': 'CHEF'}, on_delete=django.db.models.deletion.CASCADE, related_name='books', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, help_text='Link to a course (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='courses.course')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Review title', max_length=200)),
                ('comment', models.TextField(help_text='Detailed review comment')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether review is approved for display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(help_text='Course being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='courses.course')),
                ('student', models.ForeignKey(help_text='Student who wrote the review', limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
                'unique_together': {('course', 'student')},
            },
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['-created_at'], name='courses_rec_created_964bbe_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['slug'], name='courses_rec_slug_09693a_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['is_public'], name='courses_rec_is_publ_adc74e_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['student', 'is_paid'], name='courses_enr_student_d6ea35_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['course', 'is_paid'], name='courses_enr_course__2c1ed7_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['-enrolled_at'], name='courses_enr_enrolle_fe4f7d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'course')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['-created_at'], name='courses_cou_created_c141ec_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='courses_cou_slug_2e551f_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_published'], name='courses_cou_is_publ_4b99b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classprogress',
            unique_together={('enrollment', 'lesson')},
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['course', 'order'], name='courses_cla_course__bfe1ed_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['-created_at'], name='courses_boo_created_ef1fb1_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['slug'], name='courses_boo_slug_0e49d3_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_public'], name='courses_boo_is_publ_062589_idx'),
        ),
    ]
